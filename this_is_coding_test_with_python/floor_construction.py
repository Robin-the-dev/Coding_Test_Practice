import sys
input = sys.stdin.readline

def solve():
    n = int(input().rstrip())

    dp_table = [0] * n
    dp_table[0] = 1
    dp_table[1] = 3

    for i in range(2, n):
        dp_table[i] = dp_table[i - 1] + dp_table[i - 2] * 2

    result = dp_table[n - 1] % 796796

    print(result)

if __name__ == '__main__':
    solve()

# 이것이 코딩테스트다 with Python 실전문제 8-7 문제 (바닥 공사)
# P. 223

# 다이나믹 프로그래밍 문제로 자주 나오는 타일문제라고 한다.
# 처음에는 점화식도 잘 못찾겠고 몇 가지 경우를 손으로 직접 찾아 보았는데도
# 문제를 어떻게 풀어야될지 찾지 못했다.

# 결국 책 속의 해설을 봤는데 그림으로 그려보니 바로 이해가 갔다.
# i의 경우의 수를 구한다고 가정 했을때
# i - 1번째의 경우의 수에서 2 X 1 타일 하나밖에 추가 하지 못하므로
# i - 1번째의 경우의 수를 더하고
# i - 2번째의 경우의 수에서는 2 X 2 타일과 1 X 2 타일 두개를 추가하는 경우밖에 없으므로
# i - 2번째의 경우의 수에서 2를 곱해서 더한후
# i번째에 넣어 주면된다.
# i - 2번째에 2 X 1 타일 두개를 추가하는 경우를 더해주지않은 이유는
# i - 1번째에서 이미 해당 경우가 고려되었기 때문에 더해주지않아도 된다.

# 다이나믹 프로그래밍 문제를 조금 풀어 봤는데
# dp table을 만들고 첫번째와 두번째의 value를 미리 넣어주고 시작하는 경우가 많은 것 같다.
# 이것을 염두에 두고 잘 모르겠으면 그림을 그려보면 금방 점화식도 찾아서 문제를
# 풀기 쉬워질것같다.

# 이 문제의 점화식은 a(i) = a(i - 1) + a(i - 2) * 2 가 된다.
